import os
from dotenv import load_dotenv
from supabase import create_client
from openai import OpenAI
from fastapi import FastAPI, Query
import traceback

# =======================
# ENV
# =======================
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not SUPABASE_URL or not SUPABASE_ANON_KEY or not OPENAI_API_KEY:
    raise RuntimeError("‚ùå –ü—Ä–æ–≤–µ—Ä—å .env: SUPABASE_URL, SUPABASE_ANON_KEY, OPENAI_API_KEY")

client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
oa = OpenAI(api_key=OPENAI_API_KEY)

# =======================
# FASTAPI INIT
# =======================
app = FastAPI(title="Reflexio Search API", version="1.0.0")


# =======================
# EMBEDDINGS
# =======================
def embed(text):
    print("üß† –í—ã–∑–æ–≤ embed() —Å —Ç–µ–∫—Å—Ç–æ–º:", text)
    resp = oa.embeddings.create(model="text-embedding-3-small", input=text)
    embedding = resp.data[0].embedding
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ embedding –¥–ª–∏–Ω–æ–π:", len(embedding))
    return embedding


# =======================
# SEARCH
# =======================
def search(query: str, match_count: int = 5):
    try:
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:", query)
        emb = embed(query)

        print("üì° –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ Supabase RPC...")
        msgs = client.rpc("match_vectors", {
            "query_embedding": emb,
            "match_count": match_count
        }).execute().data or []

        sums = client.rpc("match_vectors_summaries", {
            "query_embedding": emb,
            "match_count": match_count
        }).execute().data or []

        results = []

        for r in msgs:
            results.append({
                "id": r.get("id"),
                "text": r.get("content"),
                "similarity": r.get("similarity") or 0.0,
                "source": r.get("metadata", {}).get("source") if isinstance(r.get("metadata"), dict) else r.get("metadata"),
                "type": "message"
            })

        for r in sums:
            results.append({
                "id": r.get("id"),
                "text": r.get("summary"),
                "similarity": r.get("similarity") or 0.0,
                "source": r.get("source"),
                "type": "summary"
            })

        results = sorted(results, key=lambda x: x["similarity"], reverse=True)
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", len(results))
        return results

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ search():", str(e))
        traceback.print_exc()
        raise RuntimeError("üò¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. –≤ –ª–æ–≥–∞—Ö Render.")


# =======================
# API ROUTES
# =======================
@app.get("/search")
def api_search(q: str = Query(..., description="–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), top_k: int = 5):
    return search(q, top_k)


@app.get("/")
def root():
    return {"status": "ok", "message": "Reflexio Search API —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}
